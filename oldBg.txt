'use client'

// import path from 'path'
import {useEffect, useRef, useState} from 'react'

export default function CanvasBackground() {
    const canvasRef = useRef<HTMLCanvasElement | null>(null)
    const [mode, setMode] = useState<'path' | 'pulse'>('pulse')

    useEffect(() => {
        const canvas = canvasRef.current
        if (!canvas) return

        const ctx = canvas.getContext('2d')
        if (!ctx) return

        const resizeCanvas = () => {
            canvas.width = window.innerWidth
            canvas.height = window.innerHeight
        }

        resizeCanvas()
        window.addEventListener('resize', resizeCanvas)

        const gridSize = 40
        const width = canvas.width 
        const height = canvas.height

        const cols = Math.floor(width / gridSize)
        const rows = Math.floor(height / gridSize)

        const seeds = Array.from({length: 30}, () => ({
            x: Math.floor(Math.random()*cols) * gridSize,
            y: Math.floor(Math.random()*rows) * gridSize,
         }))

        const getClosestSeed = (x: number, y: number) => {
            let minDist = Infinity
            let index = -1
            seeds.forEach((seed, i) => {
                const dist = Math.abs(seed.x-x) + Math.abs(seed.y-y)
                if (dist < minDist) {
                    minDist = dist
                    index = i
                }
            })
            return index
        }
        
        const segments: {x1: number, y1: number, x2: number, y2: number}[] = []


        for (let x = 0; x < width; x += gridSize) {
            for (let y = 0; y < height; y+= gridSize) {
                const currentSeed = getClosestSeed(x, y)
                const right = getClosestSeed(x+gridSize, y)
                const down = getClosestSeed(x, y+gridSize)

                if (currentSeed !== right) {
                    segments.push({
                        x1: x + gridSize,
                        y1: y,
                        x2: x + gridSize,
                        y2: y + gridSize
                    })
                }

                if (currentSeed !== down) {
                    segments.push({
                        x1: x,
                        y1: y + gridSize,
                        x2: x + gridSize,
                        y2: y + gridSize
                    })
                }
            }
        }

        const dots = segments.map((segment) => ({
            ...segment,
            progress: Math.random(),
            speed: .005 + Math.random() * .01
        }))

        const pathDots: typeof dots = []
        let flash: {x: number; y: number; opacity: number} | null = null

        const spawnPathDot = () => {
            if (pathDots.length >= 2) return
            const seg = segments[Math.floor(Math.random() * segments.length)]
            pathDots.push({
                ...seg, 
                progress: 0,
                speed: 0.005 + Math.random() * 0.01
            })
        }

        const scheduleNextDot = () => {
            const delay = 5000 + Math.random() * 3000
            setTimeout(() => {
                spawnPathDot()
                scheduleNextDot()
            }, delay)
        }

        if (mode === 'path') {
            scheduleNextDot()
        }

        function animate() {
            if (!ctx || !canvas) return

            ctx.clearRect(0, 0, canvas.width, canvas.height)

            ctx.strokeStyle = '#0ff'
            ctx.lineWidth = 1

            segments.forEach(({x1, y1, x2, y2}) => {
                ctx.beginPath()
                ctx.moveTo(x1, y1)
                ctx.lineTo(x2, y2)
                ctx.stroke()
            })

            const activeDots = mode === 'path' ? pathDots : dots
    
            activeDots.forEach((dot) => {
                dot.progress += dot.speed
                if (dot.progress > 1) {
                    dot.progress = 0

                    if (mode === 'path') {
                        const options = segments.filter(seg => 
                            (seg.x1 === dot.x2 && seg.y1 === dot.y2) ||
                            (seg.x2 === dot.x2 && seg.y2 === dot.y2)
                        )
                        if (options.length > 0) {
                            const nextSeg = options[Math.floor(Math.random() * options.length)]

                            dot.x1 = nextSeg.x1
                            dot.y1 = nextSeg.y1 
                            dot.x2 = nextSeg.x1 === dot.x2 && nextSeg.y1 === dot.y2 ? nextSeg.x2 : nextSeg.x1
                            dot.y2 = nextSeg.y2 === dot.y2 && nextSeg.x1 === dot.x2 ? nextSeg.y2 : nextSeg.y1
                            
                        }  
                    }
                }

                const x = dot.x1 + (dot.x2 - dot.x1) * dot.progress
                const y = dot.y1 + (dot.y2 - dot.y1) * dot.progress

                ctx.beginPath()
                ctx.shadowBlur = 10
                ctx.shadowColor = '#0ff'
                ctx.fillStyle = '#0ff'
                ctx.arc(x, y, 2, 0, Math.PI * 2)
                ctx.fill()
                ctx.shadowBlur = 0
            })

            if (mode === 'path' && pathDots.length === 2) {
                const [a, b] = pathDots
                const ax = a.x1 + (a.x2 - a.x1) * a.progress
                const ay = a.y1 + (a.y2 - a.y1) * a.progress
                const bx = b.x1 + (b.x2 - b.x1) * b.progress
                const by = b.y1 + (b.y2 - b.y1) * b.progress
                const dist = Math.hypot(ax - bx, ay - by)

                if (dist < 10 && !flash) {
                    flash = {x: (ax + bx) /2, y: (ay + by) / 2, opacity: 1}
                    pathDots.length = 0
                }
            }

            if (flash) {
                ctx.beginPath()
                ctx.fillStyle = `rgba(255, 255, 255, ${flash.opacity})`
                ctx.arc(flash.x, flash.y, 20, 0, Math.PI * 2)
                ctx.fill()
                flash.opacity -= .05 
                if (flash.opacity <= 0) {
                    flash = null
                }
            }

            requestAnimationFrame(animate)
        }

        animate()

        return () => {
            window.removeEventListener('resize', resizeCanvas)

        }
    }, [mode])

    return (
        <>
        <canvas
            ref = {canvasRef}
            className = 'fixed inset-0 z-[-1]' />
        <button 
            onClick = {() => setMode(mode === 'path' ? 'pulse' : 'path')}
            className = 'absolute top-4 left-4 bg-white text-black p-2 rounded'>
                Mode: {mode === 'path' ? 'Path (2 Dots)' : 'Pulse (Multiple Dots)'}
        </button>

        </>
    )

}